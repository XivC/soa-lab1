openapi: 3.0.3
info:
  title: Dybov's and Lavrov's SoA lab-1
  description: Some dragons service
  version: 1.0.0


tags:
  - name: CRUD
    description: Dragons and Persons CRUD operations
  - name: Killer
    description: Dragon kill operations



paths:
  /dragons:
    get:
      summary: Get a list of dragons
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
          required: False
      responses:
        '200':
          $ref: '#/components/responses/ListOfDragonsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
          
    post:
      summary: Create a new dragon
      tags:
        - CRUD
      parameters:
        - name: dragon
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Dragon'
          
      responses:
        '201':
          description: Dragon created successfully
          content:
            application/xml:
                schema:
                  $ref: '#/components/schemas/Dragon'
            
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /dragons/{dragonId}:
    get:
      summary: Get dragon by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'
        
      responses:
        '200':
          description: A dragon
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Dragon'
        '404':
          description: Dragon not found

    put:
      summary: Update a dragon by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'
        - name: dragon
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Dragon'

      responses:
        '200':
          description: Dragon updated successfully
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          description: Dragon not found

    delete:
      summary: Delete a dragon by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/DragonIdParam'
      responses:
        '204':
          description: Dragon deleted successfully
        '404':
          description: Dragon not found

  /dragons/sum-age:
    get:
      summary: Calculate the sum of age for all dragons
      tags:
        - CRUD
      responses:
        '200':
          description: The sum of age for all dragons
          content:
            application/xml:
              schema:
                type: integer
                format: int32
                example: 12222
                xml:
                  name: Sum
            
          
  /dragons/count-by-type:
    get:
      summary: Count dragons by type
      tags:
        - CRUD
      parameters:
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DragonType'
      responses:
        '200':
          description: The count of dragons with the specified type
          content:
            application/xml:
              schema:
                type: integer
                format: int32
                example: 12222
                xml:
                  name: Sum
                  
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /dragons/filter-by-color:
    get:
      summary: Filter dragons by color
      tags:
        - CRUD
      parameters:
        - name: color
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Color'
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ListOfDragonsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'


  /persons/{personId}:
    get:
      summary: Get person by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'

      responses:
        '200':
          description: A person
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found

    put:
      summary: Update person by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'
        - name: person
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Person'

      responses:
        '200':
          description: Person updated successfully
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          description: Person not found

    delete:
      summary: Delete person by ID
      tags:
        - CRUD
      parameters:
        - $ref: '#/components/parameters/PersonIdParam'
      responses:
        '204':
          description: Person deleted successfully
        '404':
          description: Person not found

  /dragon/{dragonId}/kill:
    post:
      parameters:
        - in: path
          name: dragonId
          schema:
            type: integer
          required: true
          description: Dragon ID to kill.
      tags:
        - Killer
      summary: Kill a dragon
      description: Kill dragon
      responses:
        '204':
          description: Killed.
        '404':
          description: Dragon with this ID does not exist.
          
  /teams/create/{teamId}/{teamName}/{teamSize}/{startCaveId}:
    post:
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
          required: true
          description: Team ID to create.
        - in: path
          name: teamName
          schema:
            type: string
          required: true
          description: Team name.
        - in: path
          name: teamSize
          schema:
            type: integer
          required: true
          description: Team size.
        - in: path
          name: startCaveId
          schema:
            type: integer
          required: true
          description: Cave ID, where team will be created.
      tags:
        - Killer
      summary: Create a team
      description: Create a team
      responses:
        '204':
          description: Killed.
        '400':
         $ref: '#/components/responses/ErrorResponse'
          
components:

  responses:
    ListOfDragonsResponse:
      description: A list of dragons
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dragon'
            xml:
              name: Results
              
    ErrorResponse:
      description: An error
      content:
        application/xml:
          schema:
            type: array
            items:
              type: string
              xml:
                name: Error
            xml:
              name: Results
  
  
  parameters:
    FilterParam:
      name: filter
      in: query
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - value
          properties:
            field:
              type: string
              example: name
            value:
              type: string
              example: andrey
      
    SortParam:
      name: sort
      in: query
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              example: name
            order:
              type: string
              enum:
                - asc
                - desc
    
    DragonIdParam:
      name: dragonId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        
    PersonIdParam:
      name: personId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        
  schemas:
        
    Dragon:
      type: object
      required:
        - name
        - coordinates
        - type
      properties:
        id:
          type: integer
          minimum: 1
          readOnly: true
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date
          readOnly: true
        age:
          type: integer
          minimum: 1
        color:
          $ref: '#/components/schemas/Color'
        character:
          $ref: '#/components/schemas/DragonCharacter'
        type:
          $ref: '#/components/schemas/DragonType'
        killer:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/Person'

    Coordinates:
      type: object
      properties:
        x:
          type: integer
        y:
          type: integer
          minimum: -740
    
    Color:
      type: string
      enum: 
        - RED
        - YELLOW 
        - ORANGE
        - BROWN
    
    DragonCharacter:
      type: string
      enum:
        - CUNNING
        - WISE
        - EVIL
        - CHAOTIC,
        - CHAOTIC_EVIL
    
    DragonType:
      type: string
      enum:
        - WATER
        - UNDERGROUND
        - AIR
        - FIRE
    
    Country:
      type: string
      enum:
        - FRANCE
        - SPAIN
        - CHINA
        

    Person:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        height:
          type: integer
          minimum: 1
        weight:
          type: number
          minimum: 1
        passportID:
          type: string
          maxLength: 47
        nationality:
          $ref: '#/components/schemas/Country'
